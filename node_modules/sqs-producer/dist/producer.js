"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Producer = void 0;
const client_sqs_1 = require("@aws-sdk/client-sqs");
const format_1 = require("./format");
const requiredOptions = ['queueUrl'];
class Producer {
    constructor(options) {
        this.validate(options);
        this.queueUrl = options.queueUrl;
        this.batchSize = options.batchSize || 10;
        this.sqs =
            options.sqs ||
                new client_sqs_1.SQSClient(Object.assign(Object.assign({}, options), { region: options.region || process.env.AWS_REGION || 'eu-west-1' }));
    }
    async queueSize() {
        const command = new client_sqs_1.GetQueueAttributesCommand({
            QueueUrl: this.queueUrl,
            AttributeNames: ['ApproximateNumberOfMessages']
        });
        const result = await this.sqs.send(command);
        return Number(result &&
            result.Attributes &&
            result.Attributes.ApproximateNumberOfMessages);
    }
    async send(messages) {
        const failedMessages = [];
        const successfulMessages = [];
        const startIndex = 0;
        const messagesArr = !Array.isArray(messages) ? [messages] : messages;
        return this.sendBatch(failedMessages, successfulMessages, messagesArr, startIndex);
    }
    validate(options) {
        for (const option of requiredOptions) {
            if (!options[option]) {
                throw new Error(`Missing SQS producer option [${option}].`);
            }
        }
        if (options.batchSize > 10 || options.batchSize < 1) {
            throw new Error('SQS batchSize option must be between 1 and 10.');
        }
    }
    async sendBatch(failedMessages, successfulMessages, messages, startIndex) {
        var _a;
        const endIndex = startIndex + this.batchSize;
        const batch = messages.slice(startIndex, endIndex);
        const params = {
            QueueUrl: this.queueUrl,
            Entries: batch.map(format_1.toEntry)
        };
        const command = new client_sqs_1.SendMessageBatchCommand(params);
        const result = await this.sqs.send(command);
        const failedMessagesBatch = failedMessages.concat(((_a = result === null || result === void 0 ? void 0 : result.Failed) === null || _a === void 0 ? void 0 : _a.map((entry) => entry.Id)) || []);
        const successfulMessagesBatch = successfulMessages.concat((result === null || result === void 0 ? void 0 : result.Successful) || []);
        if (endIndex < messages.length) {
            return this.sendBatch(failedMessagesBatch, successfulMessagesBatch, messages, endIndex);
        }
        if (failedMessagesBatch.length === 0) {
            return successfulMessagesBatch;
        }
        throw new Error(`Failed to send messages: ${failedMessagesBatch.join(', ')}`);
    }
}
exports.Producer = Producer;
Producer.create = (options) => {
    return new Producer(options);
};
